NASA project
***Introduction & Architecture
https://www.lucidchart.com/

1.Create server and client folder
2.Lucidchart - is to create diagrams for project to have a better visuallise
3.We using MVC (model-view-controllers) pattern



***NASA Dashboard Front End Setup
https://create-react-app.dev/ 
https://academy.zerotomastery.io/courses/1206554/lectures/31819184


***NASA Dashboard Functionality
-


***What You Need To Know
...react


***React.js Front End Code Walkthrough
*General idea about react



***API Server Setup
-we going to setup our node server so we can build a production ready for our API
-we gonna use express framework: 
    go to server folder 
        -> npm init -y 
            -->> npm install express (dependencies)
                --->>>npm install --save-dev nodemon(for life easier)


***Environment Variables On Windows
"start": "set PORT=5000&& node src/server.js"

Instead of:

"start": "PORT=5000 node src/server.js"


***GET /planets
see Code



***CORS Middleware
-You can;t fetch data between ur severs without setting a header (e.g from localhost:7000 -> to localhost:2000)

REMEMBER - What is an origin? (cors origin requests)
https://www.npmjs.com/package/cors

Protocol -> https://
Host -> www.google.com
Port -> :443

Think of whitelisting -> opposite of blacklisting

how to setup a cors
1.install cors package to our server-> npm install cors  
2.Go to ur app file, require cors and call with app.use(cors());



***Models vs Controllers vs Routers
Why to have our models separated ny controllers and routers

!!!There is always 1 for 1 for routes and controllers
a.router.js <---------- a.controller.js

There is not always 1 for 1 into models and controllers
model might be using in another controllers or routes






***The Planets Model
in the server -> npm install csv-parse



***LOADING Data On Startup
Bonus: Node Streams Promises API - https://nodejs.org/api/stream.html#stream_streams_promises_api


***Automating Full Stack Applications With NPM
-to run our nasa project we need to run or backend API by changing directory to our server by running
npm start/npm run watch   and    in a different terminal we need to our client from client folder and 
running npm start

-we will add another package to the root folder for NASA, and we will use this root npm package to 
start our application both for frontend and backend, and avoid switching the folder to start 
separately

-go to nasa project folder, npm init -y
-go to package.json and create two scripts that will run the server first than the client
instead of 
    /* "server": "cd server && npm run watch",*/
    /* "client": "cd client && npm start",*/
do this 
    "server": "npm run watch --prefix server",
    "client": "npm start --prefix client",
than create 
    MAC/LINUX "watch": "npm run server & npm run client",
    WINDOWS "watch": "npm-run-all --parallel server client",
    
    LOOK UP this



***Serving React.js Front End In Production
Deployment With Create React App - https://create-react-app.dev/docs/deployment/

How to run our application on the same server? (for ex have same PORT)
Clouds to deploy applications: AWS Amplify, Azure, Firebase

for moment: 
1.Go to client folder and run : npm run build

-2.Create this in package json 
    MAC/LINUX"build": "BUILD_PATH=../server/public react-scripts build",
    WINDOWS "build": "set BUILD_PATH=../server/public&&react-scripts build",
*this will create a compressed app in the server folder* and copy all files 
-Or you can do it manually and just copy-paste the folder public



***Logging Requests With Morgan
Morgan NPM Package https://www.npmjs.com/package/morgan

npm install morgan  
HTTP Request logger middleware for node.js -> const morgan = require('morgan');
call middleware in app.js


***The Launches Model 
JavaScript Maps - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map

JavaScript Map object holds key-value pairs and remembers the original insertion order of the keys. 



***GET /launches
see code / is almot same with /planets ... dont forget to fetch data to frontend in requests.js`


***Serving Applications With Client Side Routing
in app.js, use that " * " star and add it where server send index.hjtml
app.get('/*', (req, res) => {
    res.sendFile(path.join(__dirname, '..', 'public', 'index.html'));
})



***Working With Data Models: Building a Data Access Layer
Separation of Concerns - https://en.wikipedia.org/wiki/Separation_of_concerns 

What goes in MODEL and what goes in CONTROLLER ??????
MODELS only works with the data based on however is stored
CONTROLLERS only use function to work with data model


***POST /launches: Creating Launches 1


***Connecting POST /launches With Front End Dashboard


Updating Our Architecture Diagram
Donâ€™t be a Junior Developer - https://zerotomastery.io/blog/dont-be-a-junior-developer/






Testin APIs
***Testing in Node

Unit Tests -> API Tests -> Automated UI Tests -> User that uses application

For us it's important the API Tests where we test requests coming in, going through our middlewares , being process by 
process handler, being send back by a response!!!



***Testing APIs With Jest
Official Jest Website - https://jestjs.io/

-Test runner
-Test fixtures
-Assertions (E.g which are functions that allows to check we expect that 5+5=10)
-Mocking (E.g We have database and see how data are deleted and added, but mocks allow us to simply replace)

JEST is a npm package and includes all of the above, working for Frontend and Backend

USE: go to server directory, because we are testing our server
-> npm install jest --save-dev
->in the package.json, scripts, do the following
    "test": "jest",
    "test-watch": "jest --watch", //this will retest our code for every change

->go to cmd and run the JEST -> npm run test
-> we create a file "launches.test.js" (this has to be done for every folder to test)


***Testing API Endpoints With Supertest: GET
in the server -> npm instal supertest --save-dev
-> in each test file you can require for supertest -> line 1 of file -> const request = require('supertest')



***Testing API Endpoints With Supertest: POST

***Testing API Endpoints With Supertest: Error Cases

***Exercise: Imposter Syndrome






Improving Node Performance
***Node Server Performance



***Improving Performance Of Our NASA Project
-we need now to start our server with pm2

go to server folder in Nasa-Project
npm install pm2
in server -> scripts in package.json
"cluster": "pm2 start src/server.js -i max"

in nasa-project -> scripts in package.json
"server": "npm run cluster --prefix server",
"deploy-cluster": "npm-run-all --parallel build server",

in nasa-project
npm run deploy-cluster
