Databases

-a database is a collection of data!

Examples of DB
-MySQL
-Microsoft SQL Server
-mongoDB
-MariaDB
-PostgreSQL
-IBMDB2
-cassandra DB

Remember CRUD Operations: Create, Read, Update/Replace, Update/Modify, Delete

The data no longer lives on our server machine, it lives in a dedicated DB that store and keeps track of our data in the most efficiently way possible
Our server request to database and database send the response back to the server




JUMP OVER -> Appendix: SQL
https://academy.zerotomastery.io/courses/enrolled/1073491


***BUilding Amazon



***5 Types Of Databases
    https://www.ibm.com/cloud/blog/brief-overview-database-landscape

1.Relational Model - The most popular : Sql, PostgreSql, Microsoft Sql, IBM DB2
    -> Is the titan of the industry. Data is stored in tables as rows and columns and often have sophisticated query engines for analytics and exploration.
    -> Relational DBs support transactional guarantees and ACID (consistency and durability) compliance, whereas most DBs in the other four families are eventually consistent.
    -> E-commerce
    -> Customer relationship management

2.Document Model - MongoDB, CouchDB, FireBase 
    -> data is big in the document 
    -> that have to hold very very lot of data
    ->Event logging, online shopping, content management and in-depth analytical processing

3.Key Value Model - Reddis DB, DynamoDB 
    -> most basic type of non-relational database, where each item is sotred as an attribute name with a corresponding value
    -> shopping carts
    -> user preferences and profile stores

4.Graph Model - AWS Neptune, JanusGraph 
    -> Similarly to how people think and process information, graph databases recall the relationships between discrete units of data.
    -> very rarely, a little bit difficult
    -> fraud detection
    -> identity and access management

5.Wide Columnar Model - Appache Cassandra, Google Cloud BigTable
    -> Security and stock market analytics
    -> Click stream analytics
    -> IoT and telemetry

    15 minutes: “How to Choose a Database” by Ben Anderson
    15 minutes: "SQL vs. NoSQL Databases: What's the Difference?" by Ben Anderson and Brad Nicholson



***Exercise: What Is A Database?

    !!! A database is a system hardware and software that allows user to store data.




***SQL Playground
    https://www.db-fiddle.com/


***What is SQL ?

    - SQL is a language that we will using to talk to a system to get a specific output when ask for a data, we will talk to a database
    - We will have to write statements (named QUEERIES) that will interact with database, to insert/extract data
    - statements will be instructions



***IMPORTANT
***What is a Query?

    - A QUERY is nothing more than an instruction
    - In english, query = question
    - In SQL, querys are the way that we are going to put together our questions for what we want answers from Database
    - A QUERY = SQL statement

E.g:  SELECT * FROM USERS -> SQL Statement
-> select us all of the information from users

E.g:  SELECT name FROM USERS -> SQL Statement
-> select us only the names from users

QUERY BREAKDOWN 
filtering data in a SQL Statement below

            identifier
clause SELECT NAME
clause FROM USERS
clause WHERE ROLE = 'MANAGER'
      keyword    condition  

how you comment a line in SQL ? use: -- condition

select name,lastname,sex
FROM "edy"
where role = 'manager' 


***Imperative vs Declarative

Declarative -> What will happen? E.g: make a sandwich with ham

Imperative -> How it will happen? E.g: Slice bread -> Slice ham -> Make Sandwich



***History of SQL (history SEQUEL)
structured english query language
    https://www.youtube.com/watch?v=KG-mqHoXOXY&ab_channel=ComputerHistoryMuseum


Select all the different values from the Country column in the Customers table.
SELECT DISTINCT Country FROM Customers;


***SQL Standards

***Tables
A table is a representation about an object (e.g user) that stores data
Every table has a name
We can see in a table the columns (id, name, sex, dateOfBirth) and the rows (1,2,3 for id; kati, edi, tudor for name; f,m,m for sex; 2000, 1999, 2007 for dateOfBirth)  


***COLUMNS
A collection of columns is called a 'DEGREE'
What a column can store is a 'DOMAIN / CONSTRAINT'



***ROWS
When we create rows we start to create data in the table
TUPLE = ROW

Every tuple has to follow the column constraint -> the id is a number
                                                -> the sex is one letter f/m
                                                etc



***Primary And Foreign Keys
-primary key - ID
-foreign key - managerID



***Relational vs NoSQL, PostgreSQL vs MongoDB Databases

MongoDB                vs                PostgreSQL


MongoDB stores data in documents. Documents are not like Words or PDF, but rather JSON documents based on the JSON specification
An example of a JSON doc would be:

{
    first-name: 'Paul',v
    last-name: 'Grigory',
    cell: '+447557505611',
    city: 'London',
    location: '[45.123,43.232]',
    profession: '['banking', 'finance', 'trader']',
    cars: [
        {
            model: 'Bentley',
            year: 2017
        },
        {
            model: 'Aston Martin',
            year: 2020
        }
    ]
}



***Scalability
Capability of the database to keep track of more and more data, maybe it can reach the limit of how much can database stores
Is all about adding additional hardware memory etc
-vertically -> create ` big database making a machine stronger
-horizontally -> connect more smaller databases adding more machine


***Sharding
Sharding is like splitting data into more databases -> for example we have a database that keeps name with all letters
->we store in database1 -> names from a - g
->we store in database2 -> names from k - r
->we store in database3 -> names from s - z






__**--**__
BACK TO INTRODUCTION IN DATABASES 

SQL vs NoSQL

For SQL we look to : PostgreSQL
For NoSQL we look to : MongoDB

                        MONGO               PostgreSQL
TYPE                  Document DB        Relational Model
ORGANIZED INTO        Collections           Tables
QUERY LANGUAGE          NoSQL                 SQL
SCALING            Primary Horizontal     Primary Vertical



***Database Schemas & Schemaless Databases

SCHEMA
MongoDB - Flexible
PostgreSQL - Rigid



***Choosing a Database for our NASA Project
You always have to think about your project and how to store data

For our project, we have 2 reasons why we should have a database
    1.Data need to persists between restarts (so we dont lose launches when we restart server)
    2.API needs to be stateless for cluster mode

Our database is supposed to have a list of launches, of each launch contains different properties including numbers, strings, arrays, booleans

Currently our launches are stored in a map, each one is looked up by its flight number that has to be unique



***SQL vs MongoDB: Trends and Object-Relational Impedance Mismatch
    JSON and BSON in MongoDB - https://www.mongodb.com/json-and-bson 
    Writing Scripts for the Mongo Shell - https://docs.mongodb.com/manual/tutorial/write-scripts-for-the-mongo-shell/ 
    Postgres JSON Types - https://www.postgresql.org/docs/current/datatype-json.html 
    Object-Relational Impedance Mismatch - https://en.wikipedia.org/wiki/Object%E2%80%93relational_impedance_mismatch

SQL vs MongoDB in our NASA PROJECT
MongoDB includes a Shell when u install on ur machine that allows you to send querys
You can write scripts for the mongo shell in JavaScript that manipulate date in MongoDB or perform administrative operation.

Object-relational impedance mismatch




***SQL vs MongoDB: Schemas, References, and ACID Transactions
    ACID Transactions - https://www.ibm.com/docs/en/cics-ts/5.4?topic=processing-acid-properties-transactions

MongoDB
    Best for unstructured data or where the structure will change often


SQL
    Structure of data is known and well defined (banking and credit card information)



***Setting up MongoDB Atlas
    Official MongoDB Website - https://www.mongodb.com/ 
    The Principle of Least Privilege - https://www.cyberark.com/what-is/least-privilege/

We can install our MongoDB on our machine locally -> https://www.mongodb.com/  -> Software -> community server
!!! But we will need maybe better to use MongoDB from Cloud for free named MongoDB Atlas  https://www.mongodb.com/ -> Cloud -> Atlas -> Start free
USERNAME:nasa-api
USERNAME:nasa-api
USERNAME:nasa-api
PASSWORD:38cLbMrABYlKiPpX
PASSWORD:38cLbMrABYlKiPpX
PASSWORD:38cLbMrABYlKiPpX

Network access -> For all IP
Connect DB -> Connect your application -> mongodb+srv://nasa-api:<password>@nasacluster.bxzfqjk.mongodb.net/?retryWrites=true&w=majority



***Connecting to MongoDB
    Official Mongoose Website - https://mongoosejs.com/
-node package
-elegant mongoDB object modeling for node.js

REPLACE PASSWORD with your set password for DB
-in NASA PROJECT -> server.js ->  const MONGO_URL = 'mongodb+srv://nasa-api:38cLbMrABYlKiPpX@nasacluster.bxzfqjk.mongodb.net/?retryWrites=true&w=majority'
-in NASA PROJECt -> server folder -> npm install mongoose
now -> server.js -> const mongoose = require('mongoose');

below startServer() function -> await mongoose.connect(MONGO_URL)

Check if connection is working -> above function startServer() or anywhere->    mongoose.connection.once('open', () => {
                                                                                    console.log('MongoDB connection ready');
                                                                                })  

Check errors -> mongoose.connection.on('error', (err) => {
                    console.error(err);
                });



***Mongoose
-Mongoose gives us object modeling for node.js

-To start with a database the data is all stored in a Collection. Our MongoDB are made up of 1 or more Collections.
The actual data the Collection stores lives in Documents
The relation between Collection <-> Document is that Collection has many Documents
The collection is made up of 0 or more documets ( 0 if document is empty)
The Document stores data in this JSON format that mongo calls bijson

NodeJS Server ---Queries--->>> Model ---Uses--->>> Schema ---Maps To--->>> Collection ---Has many--->>>Documents



***NASA -> Creating Mongoose Schema for Launches
-When working with database is recommended to start with schemas and work from there

Create a SCHEMA file in Models Folder
launches.mongo.js -> see the file


***Exercise: Creating Mongoose Schema for Planets
planets.mongo.js -> see the file



***Creating Models From Schemas]
the both mongos file created in 'models' folder have to be exported


***Mongoose Models vs MVC Models
Why do we have 2 models now ?  launches models and mongo launches models ?

They are not exactly the same, the difference between is that models and shemas are objects and classes that mongos provide to us to talk to collection of data in mongoDB
Our simple model is something that generally captures the data and API working it



***Inserting And Updating Documents
-we gonna use planets mongo model we exported to insert planets that we found in the planets collection
-require planets mongo model in planets.model.js -> const planets = require('./planets.mongo');

!!! insert + update = upsert
we need to upsert mongoDB when running/restarting server, if not it will duplicate and add over and over again same data... so upsert will insert data only if it doesn't exist 



***Finding Documents
in planets.model.js -> 
    in function getAllPlanets(){
        return await planets.find({  });
    }

    make functio getAllPlanets() async 

in planets.controller.js -> 
    make function httpGetAllPlanets() async too



***The Upsert Operation
in planets.model.js -> 

.on('data', async (data) => {
    // results.push(data);
    if (isHabitablePlanet(data)) {
        // habitablePlanets.push(data);
        //now we gonna send data to mongoDB
        savePlanet(data)
    }
})

Our planets will only be added if it doesn't exist, it if does will not be added

Create new function 

async function savePlanet(planet) {
    try {
        await planets.updateOne({
            //kepler_name is coming from kepler_data column
            keplerName: planet.kepler_name,
        }, {
            keplerName: planet.kepler_name,
        }, {
            upsert: true,
        });
    } catch(err) {
        console.error(`Could not ssave a planet ${err}`);
    }
}


***ObjectIDs
    MongoDB ObjectID to Timestamp Calculator - https://steveridout.github.io/

ObjectIDs are the way that MongoDB stores data and make difference between objects from the array



***Excluding Fields From The Response
    that "__v" from mongoDB data, is the version of SCHEMA


1.first {} is to select the Criteria
2.second {} is to apply/select what fields to display
return await planets.find({}, {

})


***Saving Launches
-commnet following from launches.model.js 
//launches.set(launch.flightNumber, launch);

->async function saveLaunch(launch) {
    await launchesDatabase.updateOne({
        flightNumber: launch.flightNumber,
        //if launch.flightNumber exists we inserting next parameter
    }, launch, {
        upsert: true,
    });
};




***Listing All Launches




***Referential Integrity
    Referential Integrity - https://en.wikipedia.org/wiki/Referential_integrity 
    Node.js Best Practices Repository - https://github.com/goldbergyoni/nodebestpractices



***Auto Increment In MongoDB  
When you have many databases side by side which one has to increment their data?
This has to be always in sync so this is why it's a little bit difficult



***Getting Latest Flight Number
create a function for getting lastLaunches


***Scheduling New Launches
function scheduleNewLaunch()



***Investigating A Mongoose Mystery


***Aborting Launches
we make request with 'delete' method


***Updating Tests For Mongoose 
