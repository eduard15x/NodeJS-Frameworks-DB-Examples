First Express.js API
-time to get to the real deal

***Why Express???
-more convenient solution
-if we manage to build same thing over and over again or kindly simillar, we should create a package/a tool which can be apply when we face that task(e.g create a server in node)
-EXPRESS IS THE MOST POPULAR BACKEND FRAMEWORK FOR JAVASCRIPT


***Introduction to Express
http://expressjs.com/ 
-first thing we need to do is to init project using npm:    npm init -y
-second thing:  npm install express
-create a file 'server.js' and start server with command: npm start ; of course after you set your app and PORT in the file



***Express vs Next.js vs Koa

***Route Parameters
-An example of how express make our lifes easier (create a list of friends that we can get by ID)



***Postman and Insomnia 
https://www.postman.com/ 
https://insomnia.rest/

Postman is a collaboration for API testing.

API Client
Automated testing
Design & Mock
Documentation for API
Monitors API
Workspaces - share with your team

Insomnia is a tool to help design and debug APIs.

Easier interface ans usability



***Development Dependencies!!!

-is getting tired restarting server over and over after every change
-we can install instal 'nodemon' for doing this when we have a change:  npm install nodemon --save-dev  =>nodemon is placed under dependencies section in json and another section
-also add the script :   "watch": "nodemon server.js"
-to start type : npm run watch



***Middleware
-it allows u to add feature to ur server using requests and responses to/from API
-are special functions that run between or in the middle of request coming in API and the response coming out API
-how Middleware functions look like:  (same with others but it has a different parameter added: next)

app.use(function(req, res, next) {
})

***Writing Our Own Logging Middleware
look in the code 'server.js', than you have to run the url in postman and get result in console



***POST Requests in Express
-create an endpoint to get a new friend and add to our collection
!!!- in express we have a build in function that understand when a request is being passed as a json   ->   express.json([])

-create function in the file 'server.js' and in POSTMAN create a new requeste, type POST, url and in the body -> set to raw -> set to JSON and write the object below
{
    'name': 'example'
}
after you send request you will see below the json object that was created 



***Model View Controller(MVC)
https://en.wikipedia.org/wiki/Model%E2%80%93view%E2%80%93controller

-MVC is a software design pattern commonly used for developing user interfaces that divides the related program logic into three interconnected elements. This is done to 
separate internal representations of informations from the ways information is presented to and accepted from the user.



***Model View Controller in ExpressJS
-we will start with our req coming in and res coming out that will be our controllers to handle
-in our directory, create a new folder named 'controllers' and in that controller we will create a few files/node modules / we will create one for each of one collection of data( one
for friends and one for messages)
-create a file 'friends.controller.js' and a file 'messages.controller.js'
-move our route handler function which send data to user into our new files (E.g for messages, move req.send(`html`))
-the controllers u create you havee to export and import in the main file 'server.js'

-the data u want to send(for example an array for 'friends'), you have to create a folder 'model' and a file with name 'friends.model.js' to set ur data for friends
-that file u need to export and import in the controller where u need that data and change with the new name variable which is same with friends array



***Express Routers
-What is a ROUTER??
ROUTER = this is like a mini application, just like our express application. It contains its own set of Middleware and Route. We use a Route to break down our app and make it more modular
-> express.Router();



***RESTFUL APIs
-what best practices to use when designing our APIs / or how to name our APIs
-What makes an API RESTFUL?
RESFUL APIs = are APIs that follow a certain style or pattern that we use when we use to build HTTP APIs 

REST = REpresentational State Transfer

Most important idea: 
-Use existing standards (HTTP, JSON, URL)
-Endpoints are collection of data that are stored on the server side
-Use GET, POST, PUT and DELETE to communicate our action that perform on the collection of data
-Client and server architecture -> Client display data to the user and allow him to perform action that are send to the server where send back data to the user 
-Stateless and cacheable - > each request is separate ant not connected with no state of the client, so our server isn't keeping tracked . We just keep track of our collection of data. We can cache
request for future use. (about user data maybe/ logins form)



***Create Read Update and Delete (CRUD)
-HTTP Methods for RESTful APIs - https://www.restapitutorial.com/lessons/httpmethods.html

HTTP Verb /     CRUD

POST      /     Create
GET       /     Read
PUT       /     Update/Replace
PATCH     /     Update/Modify
DELETE    /     Delete



***SENDING FILES
-how to send for example other type of data than json/text/html (for ex a image)
-we need to call (require) path module in the first line, because if we want to specify in  a res.send('/path) the location of photo we can't do this without require the path module
 


 ***Serving Websites With Node
Bonus: Key Features of a Content Delivery Network - https://aws.amazon.com/cloudfront/features/
-use node to serve a frontend web application, (e.g a static webpage), you need to use express static file middleware



***Templating Engines
expressjs.com/en/resources/template-engines.html

Q:What does a Template Engine do? 
A: When you run an Express Server, the template engine replaces the variables e.g: {{title}} -> with their actual values that comes from node server and transform that document into a template that comes as an 
HTML file to be rendered by the browser

To use Template Engine we need to install npm package 'hbs' = "handle bars"  ->  npm install hbs --save
We dont need to import/require into our node application
Express has its own way to load the template engine internally, we just need to tell express which template engine we are using and where can finds the template
Go to API reference on the site I wrote above, and look for app.set() method
set template engine in 'server.js'    ->   app.set('view engine', 'hbs');
create folder 'views'
move html into this folder, change name to .hbs
in the route file js 'server.js' add -> app.get('/', ())



***Layouts and Separation of Concerns
-how template engine apply
